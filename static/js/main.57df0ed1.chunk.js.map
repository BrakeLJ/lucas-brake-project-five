{"version":3,"sources":["components/Header.js","components/Footer.js","components/Search.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Footer","href","target","rel","aria-label","Search","handleChange","e","setState","userInput","value","state","htmlFor","onChange","this","type","name","id","onClick","props","getHeroes","Component","App","preventDefault","axios","method","url","dataResponse","params","nameStartsWith","ts","apikey","hash","limit","then","results","data","heroes","length","alert","console","log","loading","map","hero","key","src","thumbnail","path","alt","comics","available","description","events","items","event","urls","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.57df0ed1.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => {\r\n  return (\r\n    <>\r\n      <header className=\"header\">\r\n        <div className=\"wrapper\">\r\n          <div className=\"header__box\">\r\n            <h1 className=\"header__heading\">HERO HUNTER</h1>\r\n          </div>\r\n        </div>\r\n      </header>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <>\r\n      <footer className=\"footer\">\r\n        <div className=\"footer__flex wrapper\">\r\n          <span className=\"footer__span\">\r\n            Created by Lucas Brake <a href=\"https://junocollege.com/\">@Juno College</a> using the MARVEL API\r\n          </span>\r\n\r\n          {/* Social media links  */}\r\n          <ul className=\"socials\">\r\n            <li>\r\n                <a href=\"https://twitter.com/Lucasbrake\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n                  aria-label=\"visit me on twitter\">\r\n                  <i className=\"fab fa-twitter\"></i>\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a href=\"https://github.com/BrakeLJ\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n                  aria-label=\"visit me on git hub\">\r\n                  <i className=\"fab fa-github\"></i>\r\n                </a>\r\n            </li>\r\n            <li>\r\n                <a href=\"https://www.linkedin.com/in/lucas-brake-b0803b57/\" target=\"_blank\" rel=\"noopener noreferrer\"\r\n                  aria-label=\"visit me on linked in\">\r\n                  <i className=\"fab fa-linkedin\"></i>\r\n                </a>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n      </footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Search extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      userInput: '',\r\n    };\r\n  }\r\n    // Call to the Marvel API to get hero data when submit button clicked\r\n  \r\n\r\n  handleChange = (e) => {\r\n      this.setState({\r\n      userInput: e.target.value,\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <>\r\n      <div className=\"wrapper\">\r\n        <fieldset>\r\n          <legend className=\"sr-only\">Hero search field</legend>\r\n          <form className=\"form\">\r\n          <label htmlFor=\"search\">Search for a hero</label>\r\n          <input \r\n          className=\"form__input\"\r\n          onChange={this.handleChange} \r\n          type=\"search\" \r\n          name=\"search\" \r\n          id=\"search\" \r\n          value={this.state.userInput} />\r\n          <button \r\n          className=\"form__btn btn\"\r\n          onClick={(e) => this.props.getHeroes(e, this.state.userInput)} \r\n          type=\"submit\" \r\n          >Assemble!</button>\r\n        </form>\r\n        </fieldset>\r\n      </div>\r\n    </>\r\n    );\r\n  }\r\n\r\n};\r\n\r\nexport default Search;\r\n\r\n\r\n\r\n","//Imports\nimport React, { Component } from 'react';\nimport axios from 'axios'; \nimport './App.css';\n\n//Component imports\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Search from \"./components/Search\";\n\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      heroes: [],\n      loading: false,\n    }\n  }\n\n  getHeroes = (e, userInput) => {\n    e.preventDefault();\n    axios({\n      method: 'GET',\n      url: 'http://gateway.marvel.com/v1/public/characters',\n      dataResponse: 'json',\n      params: {\n        nameStartsWith: userInput,\n        ts: '12345678',\n        apikey: '74826c366b96b5cccf6669c19d47912b',\n        hash: '0893c180424f6ddf206200bc03297222',\n        limit: 100,\n      }})\n      .then(results => {\n          results = results.data.data.results;\n          this.setState({\n          heroes: results,\n      })\n      if (this.state.heroes.length  === 0) {\n      alert('Try again true believer!')\n      }\n      console.log(this.state.heroes);\n    })\n  }\n\n    // handleChange = (e) => {\n    //   this.setState({\n    //     userInput: e.target.value,\n    //   })\n    // }\n  \n\n  render() {\n    return (\n      <div className=\"app\">\n        <Header />\n        <Search getHeroes={this.getHeroes}/>\n        <div className=\"wrapper\">\n          {/* <fieldset>\n            <legend className=\"sr-only\">Hero search field</legend>\n            <form className=\"form\">\n                <label htmlFor=\"search\">Search for a hero</label>\n                <input \n                className=\"form__input\"\n                onChange={this.handleChange} \n                type=\"search\" \n                name=\"search\" \n                id=\"search\" \n                value={this.state.userInput} />\n                <button \n                className=\"form__btn btn\"\n                onClick={this.getHeroes} \n                type=\"submit\" \n                >Assemble!</button>\n            </form>\n          </fieldset> */}\n  \n          <ul className=\"hero-result\">\n            {this.state.heroes.map((hero) => {\n              return(\n                <li key={hero.id} className=\"hero-result__card\">\n                  <img src={`${hero.thumbnail.path}/standard_fantastic.jpg`}  alt=\"portrait of \"/>\n                  <div className=\"hero-result__text\">\n                    <h2>{hero.name}</h2>\n                    <span># of Comics: {hero.comics.available}</span>\n                    <p>{hero.description}</p>\n                    <h3>Events</h3>\n                    <ul>{hero.events.items.map((event) => {\n                      return (\n                        <li key={event.name}>{event.name}</li>\n                      )\n                    })}\n                    <a href={hero.urls[1].url}>Learn More</a>\n                    </ul>\n                  </div>\n                </li>\n              )\n            })}\n          </ul>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}